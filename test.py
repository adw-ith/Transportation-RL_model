import json
import argparse
import sys

# Assumes your optimizer class is in 'optimizer.py'.
# Change this if you placed the LogisticsOptimizer in a different file (e.g., from agent import LogisticsOptimizer)
try:
    from m import LogisticsOptimizer
except ImportError:
    print("Error: Could not find the 'LogisticsOptimizer' class.")
    print("Please ensure it is in a file named 'optimizer.py' or update the import statement in test.py.")
    sys.exit(1)


def pretty_print_results(result: dict):
    """Formats and prints the optimization results in a readable way."""
    
    print("\n" + "="*25)
    print("  OPTIMIZATION COMPLETE")
    print("="*25 + "\n")

    # --- Metrics Summary ---
    print("üìä METRICS SUMMARY")
    print("-"*25)
    metrics = result.get("metrics", {})
    success = "‚úÖ SUCCESS" if result.get("success") else "‚ùå FAILED"
    print(f"  Overall Status: {success}")
    print(f"  Delivery Rate:  {metrics.get('delivery_rate', 0) * 100:.1f}% ({metrics.get('packages_delivered', 0)}/{metrics.get('total_packages', 0)})")
    print(f"  Total Time:     {metrics.get('total_time', 0):.2f} units")
    print(f"  Total Distance: {metrics.get('total_distance', 0):.2f} km")
    print(f"  Total Cost:     ${metrics.get('total_cost', 0):.2f}")
    print(f"  Vehicles Used:  {metrics.get('vehicles_used', 0)}")
    print("-"*25 + "\n")

    # --- Execution Plan ---
    print("üöõ EXECUTION PLAN (Timeline)")
    print("-"*25)
    plan = result.get("execution_plan", [])
    if not plan:
        print("  No actions were taken.")
    else:
        for step in plan:
            time = step['time']
            v_id = step['vehicle_id']
            action = step['action']
            
            if action == 'move_to':
                dest = step['destination']
                print(f"  [T={time:<6.1f}] Vehicle {v_id} -> Moves to {dest}")
                if step.get('deliveries'):
                    print(f"    {'':<10} ‚úîÔ∏è  Delivers packages: {step['deliveries']}")
                if step.get('pickups'):
                    print(f"    {'':<10} üì¶ Picks up packages: {step['pickups']}")
            elif action == 'wait':
                duration = step['duration']
                print(f"  [T={time:<6.1f}] Vehicle {v_id} -> Waits for {duration} units")
    print("-"*25 + "\n")

    # --- Vehicle Routes ---
    print("üó∫Ô∏è FINAL VEHICLE ROUTES")
    print("-"*25)
    routes = result.get("vehicle_routes", {})
    if not routes:
        print("  No vehicle routes were generated.")
    else:
        for v_id, route_list in routes.items():
            route_str = " -> ".join(route_list)
            print(f"  Vehicle {v_id}: {route_str}")
    print("-"*25 + "\n")
    
    # --- Undelivered Packages ---
    undelivered = result.get("undelivered_packages", [])
    if undelivered:
        print("‚ö†Ô∏è UNDELIVERED PACKAGES")
        print("-"*25)
        print(f"  The following package IDs were not delivered: {undelivered}")
        print("-"*25 + "\n")


def main():
    """Main function to run the test."""
    parser = argparse.ArgumentParser(description="Test a trained logistics optimization model.")
    parser.add_argument(
        "--model", 
        type=str, 
        default="logistics_model_v2.weights.h5", 
        help="Path to the trained model weights file."
    )
    parser.add_argument(
        "--input", 
        type=str, 
        default="custom_scenario.json", 
        help="Path to the scenario JSON file."
    )
    args = parser.parse_args()

    # --- Load Model ---
    try:
        print(f"Loading model from '{args.model}'...")
        optimizer = LogisticsOptimizer(model_path=args.model)
    except Exception as e:
        print(f"\nError: Could not load the model weights from '{args.model}'.")
        print("Please make sure the file exists and was generated by the training script.")
        print(f"TensorFlow error: {e}")
        return

    # --- Load Scenario ---
    try:
        print(f"Loading scenario from '{args.input}'...")
        with open(args.input, 'r') as f:
            scenario_data = json.load(f)
    except FileNotFoundError:
        print(f"\nError: Input file not found at '{args.input}'.")
        print("Please make sure 'custom_input.json' is in the same directory.")
        return
    except json.JSONDecodeError:
        print(f"\nError: Could not parse '{args.input}'. Please ensure it is a valid JSON file.")
        return

    # --- Run Optimization ---
    print("Running optimization...")
    result = optimizer.optimize_routes(scenario_data)

    # --- Print Results ---
    pretty_print_results(result)


if __name__ == "__main__":
    main()